"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AppKey:
    r"""The application keys section provide APIs that can be used to manage application keys for your project. A single project can have one or more application keys."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete(self, request: operations.TigrisDeleteAppKeyRequest) -> operations.TigrisDeleteAppKeyResponse:
        r"""Deletes the app key
        Delete an app key.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TigrisDeleteAppKeyPathParams, base_url, '/v1/projects/{project}/apps/keys/delete', request.path_params)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TigrisDeleteAppKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteAppKeyResponse])
                res.delete_app_key_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def list(self, request: operations.TigrisListAppKeysRequest) -> operations.TigrisListAppKeysResponse:
        r"""List all the app keys
        Lists all app keys visible to requesting actor.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TigrisListAppKeysPathParams, base_url, '/v1/projects/{project}/apps/keys', request.path_params)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TigrisListAppKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAppKeysResponse])
                res.list_app_keys_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def rotate(self, request: operations.TigrisRotateAppKeySecretRequest) -> operations.TigrisRotateAppKeySecretResponse:
        r"""Rotates the app key secret
        Endpoint is used to rotate the secret for the app key.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TigrisRotateAppKeySecretPathParams, base_url, '/v1/projects/{project}/apps/keys/rotate', request.path_params)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TigrisRotateAppKeySecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RotateAppKeyResponse])
                res.rotate_app_key_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def tigris_create_app_key(self, request: operations.TigrisCreateAppKeyRequest) -> operations.TigrisCreateAppKeyResponse:
        r"""Creates the app key
        Create an app key.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TigrisCreateAppKeyPathParams, base_url, '/v1/projects/{project}/apps/keys/create', request.path_params)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TigrisCreateAppKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateAppKeyResponse])
                res.create_app_key_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    def update(self, request: operations.TigrisUpdateAppKeyRequest) -> operations.TigrisUpdateAppKeyResponse:
        r"""Updates the description of the app key
        Update the description of an app key.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TigrisUpdateAppKeyPathParams, base_url, '/v1/projects/{project}/apps/keys/update', request.path_params)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TigrisUpdateAppKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpdateAppKeyResponse])
                res.update_app_key_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    