"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from tigris import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SetRequest:
    
    ex: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ex'), 'exclude': lambda f: f is None }})

    r"""optional - ttl specific to this key in second"""
    nx: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nx'), 'exclude': lambda f: f is None }})

    r"""set only if the key doesn't exist"""
    px: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('px'), 'exclude': lambda f: f is None }})

    r"""optional - ttl specific to this key in millisecond"""
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})

    r"""free form byte[] value"""
    xx: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('xx'), 'exclude': lambda f: f is None }})

    r"""set only if the key exist"""
    