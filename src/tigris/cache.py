"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from tigris.models import operations, shared
from typing import Any, Optional

class Cache:
    r"""The cache section provide APIs that can be used to perform cache operations."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def create(self, create_cache_request: shared.CreateCacheRequest, name: str, project: str) -> operations.CacheCreateCacheResponse:
        r"""Creates the cache"""
        request = operations.CacheCreateCacheRequest(
            create_cache_request=create_cache_request,
            name=name,
            project=project,
        )
        
        base_url = self._server_url
        
        url = utils.generate_url(operations.CacheCreateCacheRequest, base_url, '/v1/projects/{project}/caches/{name}/create', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_cache_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CacheCreateCacheResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateCacheResponse])
                res.create_cache_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    
    def delete(self, request_body: dict[str, Any], name: str, project: str) -> operations.CacheDeleteCacheResponse:
        r"""Deletes the cache"""
        request = operations.CacheDeleteCacheRequest(
            request_body=request_body,
            name=name,
            project=project,
        )
        
        base_url = self._server_url
        
        url = utils.generate_url(operations.CacheDeleteCacheRequest, base_url, '/v1/projects/{project}/caches/{name}/delete', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CacheDeleteCacheResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteCacheResponse])
                res.delete_cache_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    
    def delete_keys(self, request_body: dict[str, Any], key: str, name: str, project: str) -> operations.CacheDelResponse:
        r"""Deletes an entry from cache"""
        request = operations.CacheDelRequest(
            request_body=request_body,
            key=key,
            name=name,
            project=project,
        )
        
        base_url = self._server_url
        
        url = utils.generate_url(operations.CacheDelRequest, base_url, '/v1/projects/{project}/caches/{name}/{key}/delete', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CacheDelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DelResponse])
                res.del_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    
    def get_key(self, key: str, name: str, project: str) -> operations.CacheGetResponse:
        r"""Reads an entry from cache"""
        request = operations.CacheGetRequest(
            key=key,
            name=name,
            project=project,
        )
        
        base_url = self._server_url
        
        url = utils.generate_url(operations.CacheGetRequest, base_url, '/v1/projects/{project}/caches/{name}/{key}/get', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CacheGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetResponse])
                res.get_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    
    def get_set_key(self, get_set_request: shared.GetSetRequest, key: str, name: str, project: str) -> operations.CacheGetSetResponse:
        r"""Sets an entry in the cache and returns the previous value if exists"""
        request = operations.CacheGetSetRequest(
            get_set_request=get_set_request,
            key=key,
            name=name,
            project=project,
        )
        
        base_url = self._server_url
        
        url = utils.generate_url(operations.CacheGetSetRequest, base_url, '/v1/projects/{project}/caches/{name}/{key}/getset', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "get_set_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CacheGetSetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetSetResponse])
                res.get_set_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    
    def list(self, project: str) -> operations.CacheListCachesResponse:
        r"""Lists all the caches for the given project"""
        request = operations.CacheListCachesRequest(
            project=project,
        )
        
        base_url = self._server_url
        
        url = utils.generate_url(operations.CacheListCachesRequest, base_url, '/v1/projects/{project}/caches/list', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CacheListCachesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListCachesResponse])
                res.list_caches_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    
    def list_keys(self, request: operations.CacheKeysRequest) -> operations.CacheKeysResponse:
        r"""Lists all the key for this cache"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CacheKeysRequest, base_url, '/v1/projects/{project}/caches/{name}/keys', request)
        
        query_params = utils.get_query_params(operations.CacheKeysRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CacheKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.KeysResponse])
                res.keys_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    
    def set_key(self, set_request: shared.SetRequest, key: str, name: str, project: str) -> operations.CacheSetResponse:
        r"""Sets an entry in the cache"""
        request = operations.CacheSetRequest(
            set_request=set_request,
            key=key,
            name=name,
            project=project,
        )
        
        base_url = self._server_url
        
        url = utils.generate_url(operations.CacheSetRequest, base_url, '/v1/projects/{project}/caches/{name}/{key}/set', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CacheSetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SetResponse])
                res.set_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Status])
                res.status = out

        return res

    